#ifndef __PointSource_H_
#define __PointSource_H_ 1

#include "Source.hh"
#include <fstream>
#include <iostream>

/** Source with defined position and enrgy that generates gammas only in that
 * point with that energy
 */
class PointSource : public Source {
public:
  PointSource() = default;
  /** Create point source
   * \param position source position
   * \param energy initial energy of particles generated by this source.
   */
  PointSource(const TVector3& position, Double_t energy)
      : Source(position), fEnergy(energy) {
  };

  /** Create point source from configuration file, examples in data/sources/
   */
  PointSource(const TString fname);

  /** Initializes source properties based on configuration file open elsewhere
   * (needed for use in MultipointSource) */
  Bool_t Init(std::ifstream& inp);

  /** Get source intensity */
  double Intensity() { return fIntensity; };

  /** Set source intensity */
  void SetIntensity(Double_t f) { fIntensity = f; };

  /** Generate particle */
  Track GenerateEvent() override;

  /** Printing PointSource configuration */
  void Print() override;

private:
  /** Init() initializes source properties based on configuration file */
  Bool_t Init() override;

  /** energy of gammas emitted from this source */
  Double_t fEnergy;

  /** intensity of gammas emitted from this source, used in MultiPointSource */
  Double_t fIntensity = 1.;

  ClassDefOverride(PointSource, 1)
};

#endif
